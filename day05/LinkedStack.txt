LinkedStack.h
#pragma once
// #include<stdio.h>
typedef int element;

typedef struct stackNode {
	element data;
	struct stackNode* link;
}stackNode;

stackNode* top; // 스택의 top 노드를 지정하기 위해 포인터  top 선언

int isStackEmpty(void);
void push(element item);
element pop(void);
void printStack(void);


LinkedStack.c
#include <stdlib.h>
#include<stdio.h>
#include "LinkedStack.h"

// 스택이 공백 상태인지 확인하는 연산
int isStackEmpty(void) {
	if (top == NULL) return 1;
	else return 0;
}

// top에 원소 삽입 
void push(element item) {
	stackNode* tmp = (stackNode*)malloc(sizeof(stackNode));
	tmp->data = item;
	tmp->link = top; // 삽입 노드를 top에 위치
	top = tmp; // top 위치를 삽입 노드로 이동 

}

// top 에 원소를 삭제 
element pop(void) {
	element item;
	stackNode* tmp =  top;
	if (isStackEmpty()) { // 공백 리스트인 경우
		printf("\n stack은 공백입니다.\n");
		return 0;
	}
	else { // 스택이 공백이 아니라면
		item = tmp->data;
		top = tmp->link; // top 위치를 삭제 노드 아래로 이동 
		free(tmp); // 삭제된 노드의 메모리 반환
		return item; // 삭제된 원소 반환
	}
}

// top을 기준으로 아래부터 출력하는 연산 
void printStack(void) {
	stackNode* p = top;
	printf("\n Stack [ ");
	while (p) {
		printf("%d ", p->data);
		p = p->link;
	}
	printf("] ");
}




LinkedStackTest.c
#include<stdio.h>
#include"LinkedStack.h"

int main(void) {
	element item;
	top = NULL;
	push(1); printStack();
	push(2); printStack();
	push(3); printStack();

	item = pop(); printStack();
	printf("\t pop : %d", item);
	item = pop(); printStack();
	printf("\t pop : %d", item);

	return 0;
}









